{"version":3,"sources":["node_modules/browser-pack/_prelude.js","Scripts/Utilities/DomUtil.ts","Scripts/Utilities/HtmlLoader.ts","Scripts/Utilities/MakeRequest.ts","Scripts/Utilities/UrlUtil.ts","Scripts/Vendor/tingle/dist/tingle.js","Scripts/main.ts"],"names":[],"mappings":"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AuB,GAA3B,GAAkC,MAAM,CAAC,QAAP,CAAgB,OAAhB,CACvF,GADuF,CAAtE;AAAA,GAArB;;AAGA,OAAA,OAAA,GAAoB;AAAA,WAAc,MAAM,CAAC,QAAP,CAAgB,MAA9B;AAAA,GAApB;;AAEA,OAAA,IAAA,GAAiB;AAAA,WAAc,MAAM,CAAC,QAAP,CAAgB,IAA9B;AAAA,GAAjB;;AAEA,OAAA,SAAA,GAAsB;AAAA,WAAgB,MAAM,CAAC,QAAP,CAAgB,QAAhB,CAAyB,KAAzB,CAA+B,GAA/B,CAAhB;AAAA,GAAtB;AAtBC,C;;AAFL,OAAA,CAAA,OAAA,GAAA,OAAA;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC9eA,IAAA,SAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;IAEqB,G;;;AACjB,iBAAA;AAAA;AACC;;;;8BAEM;AACH,UAAI;AACA,aAAK,YAAL;AACH,OAFD,CAEE,OAAO,KAAP,EAAc,CACf;AACJ;;;mCAEW;AACR,UAAI,SAAS,GAAG,QAAQ,CAAC,gBAAT,CAA0B,OAA1B,CAAhB;AACA,SAAG,KAAH,CACK,IADL,CACU,SADV,EAEK,OAFL,CAEa,UAAC,OAAD,EAAmB,KAAnB,EAAkC,KAAlC,EAA0D;AAC/D,QAAA,OAAO,CAAC,gBAAR,CACI,OADJ,EAEI,YAAK;AACD,cAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,CAAY,OAAZ,CAAhB;AACA,cAAM,OAAO,GAAG,IAAI,SAAA,CAAA,OAAJ,EAAhB;AACA,cAAI,MAAM,GAAG,OAAO,CAAC,WAAR,CAAoB,QAApB,CAAb;AACA,cAAM,OAAO,aAAM,OAAO,CAAC,OAAR,EAAN,gCAA6C,MAA7C,CAAb;AACA,cAAI,YAAA,CAAA,OAAJ,CAAe,YAAf,EAA6B,IAA7B,CAAkC,OAAlC;AACA,cAAI,aAAA,CAAA,OAAJ,CAAgB,OAAhB,EACK,IADL,GAEK,IAFL,CAEU,UAAC,IAAD,EAAS;AACX,gBAAM,KAAK,GAAG,IAAI,MAAM,CAAC,KAAX,CAAiB;AAC3B,cAAA,MAAM,EAAE,IADmB;AAE3B,cAAA,YAAY,EAAE,KAFa;AAG3B,cAAA,YAAY,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,QAAtB,CAHa;AAI3B,cAAA,UAAU,EAAE,OAJe;AAK3B,cAAA,QAAQ,EAAE,CAAC,gBAAD,EAAmB,gBAAnB,CALiB;AAM3B,cAAA,WAAW,EAAE;AAAA,uBAAM,IAAN;AAAA;AANc,aAAjB,CAAd;AAQA,YAAA,KAAK,CAAC,UAAN,CAAiB,IAAjB;AACA,YAAA,KAAK,CAAC,IAAN;AACH,WAbL,EAcK,KAdL,CAcW,UAAC,GAAD,EAAQ;AACX,YAAA,OAAO,CAAC,KAAR,CAAc,2BAAd,EAA2C,GAAG,CAAC,UAA/C;AACH,WAhBL;AAkBH,SA1BL,EA2BI,KA3BJ;AA6BH,OAhCL;AAiCH;;;;;;AA9CL,OAAA,CAAA,OAAA,GAAA,GAAA;;AAiDA,QAAQ,CAAC,kBAAT,GAA8B,YAAK;AAC/B,MAAI,QAAQ,CAAC,UAAT,IAAuB,aAA3B,EAA0C;AACtC,QAAI,GAAJ,GAAU,OAAV;AACH;AACJ,CAJD","file":"site.min.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","ï»¿export default class DomUtil {\n\telement: Element;\n\tconstructor(element: Element) {\n\t\tthis.element = element;\n\t}\n\n\tgetDataAttr(attr: string, defaultvalue: string = undefined): any {\n\t\tif (!this.element) return null;\n\t\tconst value = this.element.getAttribute(`data-${attr}`);\n\n\t\treturn value !== undefined ? value : defaultvalue;\n\t}\n\n\tsetDataAttr(attr: string, value: string): any {\n\t\tif (!this.element) return null;\n\t\treturn this.element.setAttribute(`data-${attr}`, value);\n\t}\n\n\tgetAttr(attr: string, defaultvalue: string = undefined): any {\n\t\tif (!this.element) return null;\n\t\tconst value = this.element.getAttribute(attr)\n\n\t\treturn value !== undefined ? value : defaultvalue;\n\t}\n\n\tsetAttr(attr: string, value: string): void {\n\t\tif (!this.element) return null;\n\t\tthis.element.setAttribute(attr, value);\n\t}\n\n\tremoveAttr(attr: string): void {\n\t\tif (!this.element) return null;\n\t\tthis.element.removeAttribute(attr);\n\t}\n\n\thasAttr(attr: string): boolean {\n\t\tif (!this.element) return null;\n\t\treturn this.element.hasAttribute(attr);\n\t}\n\n\tshake(): void {\n\t\tthis.appendClass(\"shake\");\n\t\tsetTimeout(() => {\n\t\t\tthis.removeClass(\"shake\");\n\t\t\t(this.element as HTMLInputElement).readOnly = false;\n\t\t}, 300);\n\t}\n\n\tremoveClass(classname) {\n\t\tthis.element.classList.remove(classname);\n\t}\n\n\tappendClass(classname) {\n\t\tthis.element.classList.add(classname);\n\t}\n}\n","\nexport default class HtmlLoader {\n    targetElement: HTMLElement;\n\n    constructor(queryString: string) {\n        this.targetElement = document.querySelector(queryString);\n    }\n\n    load(url: string, method: string = \"get\") {\n        if (!this.targetElement) {\n            throw new Error(\"missing target element\");\n        }\n\n        const xmlHttpRequest = new XMLHttpRequest();\n\n        xmlHttpRequest.onreadystatechange = () => {\n            if (xmlHttpRequest.readyState == 4 && xmlHttpRequest.status == 200) {\n                this.targetElement.innerHTML = xmlHttpRequest.responseText;\n            }\n        };\n\n        xmlHttpRequest.open(method, url, true);\n        xmlHttpRequest.send();\n    }\n}","\nexport default class MakeRequest {\n    method: string;\n    url: string;\n    constructor(url: string, method: string = \"get\") {\n        this.method = method;\n        this.url = url;\n    }\n\n    send() {\n        return new Promise((resolve, reject) => {\n            const xmlHttpRequest = new XMLHttpRequest();\n            xmlHttpRequest.open(this.method, this.url);\n            xmlHttpRequest.onload = () => {\n                if (xmlHttpRequest.status >= 200 && xmlHttpRequest.status < 300) {\n                    resolve(xmlHttpRequest.response);\n                } else {\n                    reject({\n                        status: xmlHttpRequest.status,\n                        statusText: xmlHttpRequest.statusText\n                    });\n                }\n            };\n            xmlHttpRequest.onerror = () => {\n                reject({\n                    status: xmlHttpRequest.status,\n                    statusText: xmlHttpRequest.statusText\n                });\n            };\n            xmlHttpRequest.send();\n        });\n    }\n}\n","export default class UrlUtil {\n    constructor() {\n    }\n\n    queryValue: Function = (field: string, url?: string): string => {\n        var href: string = url ? url : window.location.href;\n        var reg: RegExp = new RegExp('[?&]' + field + '=([^&#]*)', 'i');\n        var string: string[] = reg.exec(href);\n        return string ? string[1].toLowerCase() : null;\n    };\n\n    currentURL: Function = (): string => window.location.href;\n\n    getURLParameters: Function = (url: string): any =>\n        (url.match(/([^?=&]+)(=([^&]*))/g) || []).reduce((a, v) =>\n            ((a[v.slice(0, v.indexOf(\"=\"))] = v.slice(v.indexOf(\"=\") + 1)), a), {});\n\n    redirect: Function = (url, asLink = true): void => asLink ? (window.location.href = url) : window.location.replace(\n        url);\n\n    baseUrl: Function = (): string => window.location.origin;\n\n    host: Function = (): string => window.location.host;\n\n    pathArray: Function = (): string[] => window.location.pathname.split('/');\n}\n","/*!\n* tingle.js\n* @author  robin_parisi\n* @version 0.14.0\n* @url\n*/\n\n/*global define,module*/\n(function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory)\n    } else if (typeof exports === 'object') {\n        module.exports = factory()\n    } else {\n        root.tingle = factory()\n    }\n}(this, function() {\n\n    /* ----------------------------------------------------------- */\n    /* == modal */\n    /* ----------------------------------------------------------- */\n\n    var transitionEvent = whichTransitionEvent()\n    var isBusy = false\n\n    function Modal(options) {\n        var defaults = {\n            onClose: null,\n            onOpen: null,\n            beforeOpen: null,\n            beforeClose: null,\n            stickyFooter: false,\n            footer: false,\n            cssClass: [],\n            closeLabel: 'Close',\n            closeMethods: ['overlay', 'button', 'escape']\n        }\n\n        // extends config\n        this.opts = extend({}, defaults, options)\n        \n        // init modal\n        this.init()\n    }\n\n    Modal.prototype.init = function() {\n        if (this.modal) {\n            return\n        }\n\n        _build.call(this)\n        _bindEvents.call(this)\n\n        // insert modal in dom\n        document.body.insertBefore(this.modal, document.body.firstChild)\n\n        if (this.opts.footer) {\n            this.addFooter()\n        }\n\n        return this\n    }\n\n    Modal.prototype._busy = function(state) {\n        isBusy = state\n    }\n\n    Modal.prototype._isBusy = function() {\n        return isBusy\n    }\n\n    Modal.prototype.destroy = function() {\n        if (this.modal === null) {\n            return\n        }\n\n        // restore scrolling\n        if (this.isOpen()) {\n            this.close(true)\n        }\n\n        // unbind all events\n        _unbindEvents.call(this)\n\n        // remove modal from dom\n        this.modal.parentNode.removeChild(this.modal)\n\n        this.modal = null\n    }\n\n    Modal.prototype.isOpen = function() {\n        return !!this.modal.classList.contains('tingle-modal--visible')\n    }\n\n    Modal.prototype.open = function() {\n        if(this._isBusy()) return\n        this._busy(true)\n\n        var self = this\n\n        // before open callback\n        if (typeof self.opts.beforeOpen === 'function') {\n            self.opts.beforeOpen()\n        }\n\n        if (this.modal.style.removeProperty) {\n            this.modal.style.removeProperty('display')\n        } else {\n            this.modal.style.removeAttribute('display')\n        }\n\n        // prevent double scroll\n        this._scrollPosition = window.pageYOffset\n        document.body.classList.add('tingle-enabled')\n        document.body.style.top = -this._scrollPosition + 'px'\n\n        // sticky footer\n        this.setStickyFooter(this.opts.stickyFooter)\n\n        // show modal\n        this.modal.classList.add('tingle-modal--visible')\n\n        if (transitionEvent) {\n            this.modal.addEventListener(transitionEvent, function handler() {\n                if (typeof self.opts.onOpen === 'function') {\n                    self.opts.onOpen.call(self)\n                }\n\n                // detach event after transition end (so it doesn't fire multiple onOpen)\n                self.modal.removeEventListener(transitionEvent, handler, false)\n                self._busy(false)\n            }, false)\n        } else {\n            if (typeof self.opts.onOpen === 'function') {\n                self.opts.onOpen.call(self)\n            }\n            self._busy(false)\n        }\n\n        // check if modal is bigger than screen height\n        this.checkOverflow()\n\n        return this\n    }\n\n    Modal.prototype.close = function(force) {\n        if(this._isBusy()) return\n        this._busy(true)\n        force = force || false\n\n        //  before close\n        if (typeof this.opts.beforeClose === 'function') {\n            var close = this.opts.beforeClose.call(this)\n            if (!close) return\n        }\n\n        document.body.classList.remove('tingle-enabled')\n        window.scrollTo(0, this._scrollPosition)\n        document.body.style.top = null\n\n        this.modal.classList.remove('tingle-modal--visible')\n\n        //Using similar setup as onOpen\n        //Reference to the Modal that's created\n        var self = this\n\n        if (force) {\n            self.modal.style.display = 'none'\n            if (typeof self.opts.onClose === 'function') {\n                self.opts.onClose.call(this)\n            }\n            self._busy(false)\n        } else if (transitionEvent) {\n            //Track when transition is happening then run onClose on complete\n            this.modal.addEventListener(transitionEvent, function handler() {\n                // detach event after transition end (so it doesn't fire multiple onClose)\n                self.modal.removeEventListener(transitionEvent, handler, false)\n\n                self.modal.style.display = 'none'\n\n                // on close callback\n                if (typeof self.opts.onClose === 'function') {\n                    self.opts.onClose.call(this)\n                }\n\n                self._busy(false)\n\n            }, false)\n        } else {\n            self.modal.style.display = 'none'\n            // on close callback\n            if (typeof self.opts.onClose === 'function') {\n                self.opts.onClose.call(this)\n            }\n            self._busy(false)\n        }\n    }\n\n    Modal.prototype.setContent = function(content) {\n        // check type of content : String or Node\n        if (typeof content === 'string') {\n            this.modalBoxContent.innerHTML = content\n        } else {\n            this.modalBoxContent.innerHTML = ''\n            this.modalBoxContent.appendChild(content)\n        }\n\n        if (this.isOpen()) {\n            // check if modal is bigger than screen height\n            this.checkOverflow()\n        }\n        \n        return this\n    }\n\n    Modal.prototype.getContent = function() {\n        return this.modalBoxContent\n    }\n\n    Modal.prototype.addFooter = function() {\n        // add footer to modal\n        _buildFooter.call(this)\n\n        return this\n    }\n\n    Modal.prototype.setFooterContent = function(content) {\n        // set footer content\n        this.modalBoxFooter.innerHTML = content\n\n        return this\n    }\n\n    Modal.prototype.getFooterContent = function() {\n        return this.modalBoxFooter\n    }\n\n    Modal.prototype.setStickyFooter = function(isSticky) {\n        // if the modal is smaller than the viewport height, we don't need sticky\n        if (!this.isOverflow()) {\n            isSticky = false\n        }\n\n        if (isSticky) {\n            if (this.modalBox.contains(this.modalBoxFooter)) {\n                this.modalBox.removeChild(this.modalBoxFooter)\n                this.modal.appendChild(this.modalBoxFooter)\n                this.modalBoxFooter.classList.add('tingle-modal-box__footer--sticky')\n                _recalculateFooterPosition.call(this)\n                this.modalBoxContent.style['padding-bottom'] = this.modalBoxFooter.clientHeight + 20 + 'px'\n            }\n        } else if (this.modalBoxFooter) {\n            if (!this.modalBox.contains(this.modalBoxFooter)) {\n                this.modal.removeChild(this.modalBoxFooter)\n                this.modalBox.appendChild(this.modalBoxFooter)\n                this.modalBoxFooter.style.width = 'auto'\n                this.modalBoxFooter.style.left = ''\n                this.modalBoxContent.style['padding-bottom'] = ''\n                this.modalBoxFooter.classList.remove('tingle-modal-box__footer--sticky')\n            }\n        }\n\n        return this\n    }\n\n\n    Modal.prototype.addFooterBtn = function(label, cssClass, callback) {\n        var btn = document.createElement('button')\n                \n        // set label\n        btn.innerHTML = label\n\n        // bind callback\n        btn.addEventListener('click', callback)\n\n        if (typeof cssClass === 'string' && cssClass.length) {\n            // add classes to btn\n            cssClass.split(' ').forEach(function(item) {\n                btn.classList.add(item)\n            })\n        }\n\n        this.modalBoxFooter.appendChild(btn)\n\n        return btn\n    }\n\n    Modal.prototype.resize = function() {\n        // eslint-disable-next-line no-console\n        console.warn('Resize is deprecated and will be removed in version 1.0')\n    }\n\n    Modal.prototype.isOverflow = function() {\n        var viewportHeight = window.innerHeight\n        var modalHeight = this.modalBox.clientHeight\n\n        return modalHeight >= viewportHeight\n    }\n\n    Modal.prototype.checkOverflow = function() {\n        // only if the modal is currently shown\n        if (this.modal.classList.contains('tingle-modal--visible')) {\n            if (this.isOverflow()) {\n                this.modal.classList.add('tingle-modal--overflow')\n            } else {\n                this.modal.classList.remove('tingle-modal--overflow')\n            }\n\n            // TODO: remove offset\n            //_offset.call(this);\n            if (!this.isOverflow() && this.opts.stickyFooter) {\n                this.setStickyFooter(false)\n            } else if (this.isOverflow() && this.opts.stickyFooter) {\n                _recalculateFooterPosition.call(this)\n                this.setStickyFooter(true)\n            }\n        }\n    }\n\n\n    /* ----------------------------------------------------------- */\n    /* == private methods */\n    /* ----------------------------------------------------------- */\n\n    function _recalculateFooterPosition() {\n        if (!this.modalBoxFooter) {\n            return\n        }\n        this.modalBoxFooter.style.width = this.modalBox.clientWidth + 'px'\n        this.modalBoxFooter.style.left = this.modalBox.offsetLeft + 'px'\n    }\n\n    function _build() {\n\n        // wrapper\n        this.modal = document.createElement('div')\n        this.modal.classList.add('tingle-modal')\n\n        // remove cusor if no overlay close method\n        if (this.opts.closeMethods.length === 0 || this.opts.closeMethods.indexOf('overlay') === -1) {\n            this.modal.classList.add('tingle-modal--noOverlayClose')\n        }\n\n        this.modal.style.display = 'none'\n\n        // custom class\n        this.opts.cssClass.forEach(function(item) {\n            if (typeof item === 'string') {\n                this.modal.classList.add(item)\n            }\n        }, this)\n\n        // close btn\n        if (this.opts.closeMethods.indexOf('button') !== -1) {\n            this.modalCloseBtn = document.createElement('button')\n            this.modalCloseBtn.type = 'button'\n            this.modalCloseBtn.classList.add('tingle-modal__close')\n\n            this.modalCloseBtnIcon = document.createElement('span')\n            this.modalCloseBtnIcon.classList.add('tingle-modal__closeIcon')\n            this.modalCloseBtnIcon.innerHTML = 'Ã'\n\n            this.modalCloseBtnLabel = document.createElement('span')\n            this.modalCloseBtnLabel.classList.add('tingle-modal__closeLabel')\n            this.modalCloseBtnLabel.innerHTML = this.opts.closeLabel\n\n            this.modalCloseBtn.appendChild(this.modalCloseBtnIcon)\n            this.modalCloseBtn.appendChild(this.modalCloseBtnLabel)\n        }\n\n        // modal\n        this.modalBox = document.createElement('div')\n        this.modalBox.classList.add('tingle-modal-box')\n\n        // modal box content\n        this.modalBoxContent = document.createElement('div')\n        this.modalBoxContent.classList.add('tingle-modal-box__content')\n\n        this.modalBox.appendChild(this.modalBoxContent)\n\n        if (this.opts.closeMethods.indexOf('button') !== -1) {\n            this.modal.appendChild(this.modalCloseBtn)\n        }\n\n        this.modal.appendChild(this.modalBox)\n\n    }\n\n    function _buildFooter() {\n        this.modalBoxFooter = document.createElement('div')\n        this.modalBoxFooter.classList.add('tingle-modal-box__footer')\n        this.modalBox.appendChild(this.modalBoxFooter)\n    }\n\n    function _bindEvents() {\n\n        this._events = {\n            clickCloseBtn: this.close.bind(this),\n            clickOverlay: _handleClickOutside.bind(this),\n            resize: this.checkOverflow.bind(this),\n            keyboardNav: _handleKeyboardNav.bind(this)\n        }\n\n        if (this.opts.closeMethods.indexOf('button') !== -1) {\n            this.modalCloseBtn.addEventListener('click', this._events.clickCloseBtn)\n        }\n\n        this.modal.addEventListener('mousedown', this._events.clickOverlay)\n        window.addEventListener('resize', this._events.resize)\n        document.addEventListener('keydown', this._events.keyboardNav)\n    }\n\n    function _handleKeyboardNav(event) {\n        // escape key\n        if (this.opts.closeMethods.indexOf('escape') !== -1 && event.which === 27 && this.isOpen()) {\n            this.close()\n        }\n    }\n\n    function _handleClickOutside(event) {\n        // if click is outside the modal\n        if (this.opts.closeMethods.indexOf('overlay') !== -1 && !_findAncestor(event.target, 'tingle-modal') &&\n        event.clientX < this.modal.clientWidth) {\n            this.close()\n        }\n    }\n\n    function _findAncestor(el, cls) {\n        while ((el = el.parentElement) && !el.classList.contains(cls));\n        return el\n    }\n\n    function _unbindEvents() {\n        if (this.opts.closeMethods.indexOf('button') !== -1) {\n            this.modalCloseBtn.removeEventListener('click', this._events.clickCloseBtn)\n        }\n        this.modal.removeEventListener('mousedown', this._events.clickOverlay)\n        window.removeEventListener('resize', this._events.resize)\n        document.removeEventListener('keydown', this._events.keyboardNav)\n    }\n\n    /* ----------------------------------------------------------- */\n    /* == confirm */\n    /* ----------------------------------------------------------- */\n\n    // coming soon\n\n    /* ----------------------------------------------------------- */\n    /* == alert */\n    /* ----------------------------------------------------------- */\n\n    // coming soon\n\n    /* ----------------------------------------------------------- */\n    /* == helpers */\n    /* ----------------------------------------------------------- */\n\n    function extend() {\n        for (var i = 1; i < arguments.length; i++) {\n            for (var key in arguments[i]) {\n                if (arguments[i].hasOwnProperty(key)) {\n                    arguments[0][key] = arguments[i][key]\n                }\n            }\n        }\n        return arguments[0]\n    }\n\n    function whichTransitionEvent() {\n        var t\n        var el = document.createElement('tingle-test-transition')\n        var transitions = {\n            'transition': 'transitionend',\n            'OTransition': 'oTransitionEnd',\n            'MozTransition': 'transitionend',\n            'WebkitTransition': 'webkitTransitionEnd'\n        }\n\n        for (t in transitions) {\n            if (el.style[t] !== undefined) {\n                return transitions[t]\n            }\n        }\n    }\n\n    /* ----------------------------------------------------------- */\n    /* == return */\n    /* ----------------------------------------------------------- */\n\n    return {\n        modal: Modal\n    }\n\n}))\n","import DomUtil from \"./Utilities/DomUtil\";\nimport UrlUtil from \"./Utilities/UrlUtil\";\nimport HtmlLoader from \"./Utilities/HtmlLoader\";\nimport * as tingle from \"./Vendor/tingle/dist/tingle\";\nimport MakeRequest from \"./Utilities/MakeRequest\";\n\nexport default class App {\n    constructor() {\n    }\n\n    execute() {\n        try {\n            this.setListeners()\n        } catch (error) {\n        }\n    }\n\n    setListeners() {\n        var usersRows = document.querySelectorAll('.user');\n        [].slice\n            .call(usersRows)\n            .forEach((element: Element, index: number, array: HTMLElement[]) => {\n                element.addEventListener(\n                    \"click\",\n                    () => {\n                        const domUtil = new DomUtil(element);\n                        const urlUtil = new UrlUtil();\n                        var userId = domUtil.getDataAttr('userid');\n                        const userUrl = `${urlUtil.baseUrl()}/api/modal/user?id=${userId}`;\n                        new HtmlLoader('#userModal').load(userUrl);\n                        new MakeRequest(userUrl)\n                            .send()\n                            .then((data) => {\n                                const modal = new tingle.modal({\n                                    footer: true,\n                                    stickyFooter: false,\n                                    closeMethods: ['overlay', 'button', 'escape'],\n                                    closeLabel: \"Close\",\n                                    cssClass: ['custom-class-1', 'custom-class-2'],\n                                    beforeClose: () => true\n                                });\n                                modal.setContent(data);\n                                modal.open();\n                            })\n                            .catch((err) => {\n                                console.error('Augh, there was an error!', err.statusText);\n                            });\n\n                    },\n                    false\n                );\n            });\n    }\n}\n\ndocument.onreadystatechange = () => {\n    if (document.readyState == \"interactive\") {\n        new App().execute();\n    }\n};\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}